#include <stdexcept>
inline MullerMatrix::MullerMatrix(): a00(1.0) ,a01(0.0),a02(0),a03(0),  a10(0),  a11(1.0), a12(0),a13(0),a20(0),a21(0),a22(1.0),a23(0),a30(0),a31(0),a32(0),a33(1.0) {}

inline MullerMatrix::MullerMatrix(MullerMatrix::Type type) {



  if (type==Horizontal)          {a00=0.5 ;a01=0.5; a02=0;a03=0;  a10=0.5;  a11=0.5; a12=0;a13=0;a20=0;a21=0;a22=0;a23=0;a30=0;a31=0;a32=0;a33=0;}
  else if (type==Vertical)       {a00=0.5 ;a01=-0.5; a02=0;a03=0;  a10=-0.5;  a11=0.5; a12=0;a13=0;a20=0;a21=0;a22=0;a23=0;a30=0;a31=0;a32=0;a33=0;}
  else if (type==Plus45)         {a00=0.5 ;a01=0.0; a02=0.5;a03=0;  a10=0.;  a11=0.; a12=0;a13=0;a20=0.5;a21=0;a22=0.5;a23=0;a30=0;a31=0;a32=0;a33=0;}
  else if (type==Identity)       {MullerMatrix();}
  else if (type==FastVertical) {a00=1 ;a01=0.0; a02=0;a03=0;  a10=0.;  a11=1.; a12=0;a13=0;a20=0.;a21=0;a22=0;a23=-1;a30=0;a31=0;a32=1;a33=0;}
  else if (type==FastHorizontal)  {a00=1 ;a01=0.0; a02=0;a03=0;  a10=0.;  a11=1.; a12=0;a13=0;a20=0.;a21=0;a22=0;a23=1;a30=0;a31=0;a32=-1;a33=0;}
  else if (type==FastVerHor)   {a00=1 ;a01=0.0; a02=0;a03=0;  a10=0.;  a11=1.; a12=0;a13=0;a20=0.;a21=0;a22=-1;a23=0;a30=0;a31=0;a32=0;a33=-1;}
 
}

inline MullerMatrix::MullerMatrix(
       const double & a00, 
			 const double & a01,
       const double & a02, 
			 const double & a03,
       const double & a10, 
			 const double & a11,
       const double & a12, 
			 const double & a13,
			 const double & a20, 
			 const double & a21,
       const double & a22, 
			 const double & a23,
       const double & a30, 
			 const double & a31,
       const double & a32, 
			 const double & a33):a00(a00),a01(a01),a02(a02),a03(a03),a10(a10),a11(a11),a12(a12),a13(a13),a20(a20),a21(a21),a22(a22),a23(a23),a30(a30),a31(a31),a32(a32),a33(a33) {}

inline double & MullerMatrix::operator () (unsigned int i, unsigned int j) {
  if (!((i>=0) && (i<=3))) throw std::range_error("Index out of range");
  if (!((j>=0) && (j<=3))) throw std::range_error("Index out of range");
  double x;
  if (i == 0){
    if (j == 0) {x = a00;}
    else if (j ==1) {x = a01;} 
    else if (j ==2) {x = a02;} 
    else if (j ==3) {x = a03;} 
  }
  if (i == 1){
    if (j == 0) {x = a10;}
    else if (j ==1) {x = a11;} 
    else if (j ==2) {x = a12;} 
    else if (j ==3) {x = a13;} 
  }
  if (i == 2){
    if (j == 0) {x = a20;}
    else if (j ==1) {x = a21;} 
    else if (j ==2) {x = a22;} 
    else if (j ==3) {x = a23;} 
  }
  if (i == 3){
    if (j == 0) {x = a30;}
    else if (j ==1) {x = a31;} 
    else if (j ==2) {x = a32;} 
    else if (j ==3) {x = a33;} 
  }
  return x;
} 

inline const double & MullerMatrix::operator () (unsigned int i, unsigned int j) const {
if (!((i>=0) && (i<=3))) throw std::range_error("Index out of range");
  if (!((j>=0) && (j<=3))) throw std::range_error("Index out of range");
  double x;
  if (i == 0){
    if (j == 0) {x = a00;}
    else if (j ==1) {x = a01;} 
    else if (j ==2) {x = a02;} 
    else if (j ==3) {x = a03;} 
  }
  if (i == 1){
    if (j == 0) {x = a10;}
    else if (j ==1) {x = a11;} 
    else if (j ==2) {x = a12;} 
    else if (j ==3) {x = a13;} 
  }
  if (i == 2){
    if (j == 0) {x = a20;}
    else if (j ==1) {x = a21;} 
    else if (j ==2) {x = a22;} 
    else if (j ==3) {x = a23;} 
  }
  if (i == 3){
    if (j == 0) {x = a30;}
    else if (j ==1) {x = a31;} 
    else if (j ==2) {x = a32;} 
    else if (j ==3) {x = a33;} 
  }
  return x;
} 

inline std::ostream & operator << (std::ostream & o, const MullerMatrix & m) {
  return o << "[" << m(0,0) << " " << m(0,1)  <<" "<< m(0,2) << " " << m(0,3)    <<  std::endl
  <<" "<< m(1,0) << " " << m(1,1)  <<" "<< m(1,2) << " " << m(1,3)    <<  std::endl
  <<" "<< m(2,0) << " " << m(2,1)  <<" "<< m(2,2) << " " << m(2,3)    <<  std::endl
	<< " " << m(3,0) << " " << m(2,1)<<" "<<m(3,2)<<" "<<m(3,3)     << "]";
  
}

inline MullerMatrix operator* (const MullerMatrix & m1, const MullerMatrix & m2) {
  double a00= m1(0,0)*m2(0,0) + m1(0,1)*m2(1,0)+m1(0,2)*m2(2,0) + m1(0,3)*m2(3,0);
  double a01= m1(0,0)*m2(0,1) + m1(0,1)*m2(1,1)+m1(0,2)*m2(2,1) + m1(0,3)*m2(3,1);
  double a10= m1(1,0)*m2(0,0) + m1(1,1)*m2(1,0)+m1(1,2)*m2(2,0) + m1(1,3)*m2(3,0);
  double a11= m1(1,0)*m2(0,1) + m1(1,1)*m2(1,1)+m1(1,2)*m2(2,1) + m1(1,3)*m2(3,1);
  double a02= m1(0,0)*m2(0,2) + m1(0,1)*m2(1,2)+m1(0,2)*m2(2,2) + m1(0,3)*m2(3,2);
  double a03= m1(0,0)*m2(0,3) + m1(0,1)*m2(1,3)+m1(0,2)*m2(2,3) + m1(0,3)*m2(3,3);
  double a12= m1(1,0)*m2(0,2) + m1(1,1)*m2(1,2)+m1(1,2)*m2(2,2) + m1(1,3)*m2(3,2);
  double a13= m1(1,0)*m2(0,3) + m1(1,1)*m2(1,3)+m1(1,2)*m2(2,3) + m1(1,3)*m2(3,3);
  double a20= m1(2,0)*m2(0,0) + m1(2,1)*m2(1,0)+m1(2,2)*m2(2,0) + m1(2,3)*m2(3,0);
  double a31= m1(3,0)*m2(0,1) + m1(3,1)*m2(1,1)+m1(3,2)*m2(2,1) + m1(3,3)*m2(3,1);
  double a30= m1(3,0)*m2(0,0) + m1(3,1)*m2(1,0)+m1(3,2)*m2(2,0) + m1(3,3)*m2(3,0);
  double a21= m1(2,0)*m2(0,1) + m1(2,1)*m2(1,1)+m1(2,2)*m2(2,1) + m1(2,3)*m2(3,1);
  double a22= m1(2,0)*m2(0,2) + m1(2,1)*m2(1,2)+m1(2,2)*m2(2,2) + m1(2,3)*m2(3,2);
  double a33= m1(3,0)*m2(0,3) + m1(3,1)*m2(1,3)+m1(3,2)*m2(2,3) + m1(3,3)*m2(3,3);
  double a23= m1(2,0)*m2(0,3) + m1(2,1)*m2(1,3)+m1(2,2)*m2(2,3) + m1(2,3)*m2(3,3);
  double a32= m1(3,0)*m2(0,2) + m1(3,1)*m2(1,2)+m1(3,2)*m2(2,2) + m1(3,3)*m2(3,2);
  return MullerMatrix(a00,a01,a02,a03,a10,a11,a12,a13,a20,a21,a22,a23,a30,a31,a32,a33);
  
}

inline StokesVector operator* (const MullerMatrix & m, const StokesVector & v) {
  double v0= m(0,0)*v(0) + m(0,1)*v(1)+m(0,2)*v(2) + m(0,3)*v(3);
  double v1= m(1,0)*v(0) + m(1,1)*v(1)+m(1,2)*v(2) + m(1,3)*v(3);
  double v2= m(2,0)*v(0) + m(2,1)*v(1)+m(2,2)*v(2) + m(2,3)*v(3);
  double v3= m(3,0)*v(0) + m(3,1)*v(1)+m(3,2)*v(2) + m(3,3)*v(3);
  return StokesVector(v0,v1,v2,v3);
}
