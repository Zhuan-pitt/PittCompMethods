#include <stdexcept>
inline StokesVector::StokesVector():x0(0.0),x1(0.0),x2(0.0),x3(0.0)  {}

inline StokesVector::StokesVector(StokesVector::Type type) {

  // const static Complex I(0,1);

  if (type==Horizontal)        {x0=1.0;  x1=1.0;x2=0;  x3=0;}
  else if (type==Vertical)     {x0=1.0;  x1=-1.0;x2=0;  x3=0;}
  else if (type == Plus45)     {x0=1.0;  x1=0;x2=1;  x3=0;}
  else if (type == Minus45)     {x0=1.0;  x1=0;x2=-1;  x3=0;}
  else if (type == Unpolarized) {x0=1.0;  x1=0;x2=0;  x3=0;}
  else if (type==Right)        {x0=1.0;  x1=.0;x2=0;  x3=1;}
  else if (type==Left)         {x0=1.0;  x1=.0;x2=0;  x3=-1;}
  
}

inline StokesVector::StokesVector(const double & x0, const double & x1, const double & x2, const double & x3):x0(x0),x1(x1),x2(x2),x3(x3) {}

inline double StokesVector::magsq() const {
  return x0;
}

inline double & StokesVector::operator () (unsigned int i) {
  if (!((i>=0) && (i<=3))) throw std::range_error("Index out of range");
  double x;
  if (i==0){x=x0;}
  else if (i==1){x=x1;}
  else if (i==2){x=x2;}
  else if (i==3){x=x3;}
  return x;
} 

inline const double & StokesVector::operator () (unsigned int i) const {
    if (!((i>=0) && (i<=3))) throw std::range_error("Index out of range");
  double x;
  if (i==0){x=x0;}
  else if (i==1){x=x1;}
  else if (i==2){x=x2;}
  else if (i==3){x=x3;}
  return x;
} 

inline std::ostream & operator << (std::ostream & o, const StokesVector & v) {
  return o << "[" << v(0) << "," << v(1) <<" "<< v(2) << "," << v(3) << "]";
}

inline StokesVector operator * (const StokesVector & v,  const double & c) {
  return StokesVector(v(0)*c, v(1)*c,v(2)*c, v(3)*c);
}

inline StokesVector operator * (const double & c, const StokesVector & v) {
  return StokesVector(v(0)*c, v(1)*c,v(2)*c, v(3)*c);
}
